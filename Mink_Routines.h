// Routines for Geometric Algebra in Minkowski spacetime
//
// Author: Kurt Nalty
// Release: 1.0
// Date: 12 March 2018
// License: Freeware
// Alternative License: BSD
//
//////////////////////////////////////////////////////

#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <time.h>
#include <iostream>
#include <fstream>
#include <ginac/ginac.h>
using namespace std;
using namespace GiNaC;

//////////////////////////////////////////////////////

struct Mink{	// 0 . 1 2 4 8 . 3 5 6 9 10 12 . 7 11 13 14 . 15
	ex q,  x,y,z,t, xy,xz,yz,xt,yt,zt,  xyz,xyt,xzt,yzt,  xyzt;
	Mink() {q = 0; x = 0; y = 0; z = 0; t = 0; 
		xy = 0; xz = 0; yz = 0;  xt = 0; yt = 0; zt = 0;
		xyz = 0; xyt = 0; xzt = 0; yzt = 0; xyzt=0;}
	Mink(ex qq, ex xx, ex yy, ex zz, ex tt, 
		ex xxyy, ex xxzz, ex yyzz, ex xxtt, ex yytt, ex zztt,
		ex xxyyzz, ex xxyytt, ex xxzztt, ex yyzztt,   ex xxyyzztt) 

		{q = qq; x = xx; y = yy; z = zz; t = tt;
		 xy = xxyy; xz = xxzz; yz = yyzz; xt = xxtt; yt = yytt; zt = zztt; 
		 xyz = xxyyzz;  xyt = xxyytt; xzt = xxzztt; yzt = yyzztt; xyzt=xxyyzztt;}
};

//////////////////////////////////////////////////////

ostream &operator<<(ostream &ff, Mink &v) ;

//////////////////////////////////////////////////////

void PrintMV(Mink &v) ;

//////////////////////////////////////////////////////

Mink OverBar(Mink a) ;

//////////////////////////////////////////////////////

Mink UnderBar(Mink a) ;

//////////////////////////////////////////////////////

Mink Reverse(Mink w) ;

//////////////////////////////////////////////////////

Mink Involution(Mink w) ;

//////////////////////////////////////////////////////

Mink Transpose(Mink w) ;

//////////////////////////////////////////////////////

Mink Conjugation(Mink w) ;

//////////////////////////////////////////////////////

Mink CliffordConjugation(Mink w) ;

//////////////////////////////////////////////////////

Mink Dual(Mink w) ; 

//////////////////////////////////////////////////////

Mink DorstDual(Mink a) ;

//////////////////////////////////////////////////////

Mink DorstUnDual(Mink a) ;

//////////////////////////////////////////////////////

Mink operator+(const Mink &u, const Mink &v) ;

//////////////////////////////////////////////////////

Mink operator-(const Mink &u, const Mink &v) ;

//////////////////////////////////////////////////////

int operator==(const Mink &u, const Mink &v) ;

//////////////////////////////////////////////////////

int operator!=(const Mink &u, const Mink &v) ;

//////////////////////////////////////////////////////

Mink operator*(const Mink &u, const Mink &v) ;

//////////////////////////////////////////////////////

Mink Product(const Mink &u, const Mink &v) ;

//////////////////////////////////////////////////////

Mink operator/(const Mink &u, const int i) ;

//////////////////////////////////////////////////////

Mink operator^(const Mink &u, const Mink &v) ;

//////////////////////////////////////////////////////

Mink Wedge(const Mink &u, const Mink &v) ;

//////////////////////////////////////////////////////

Mink AntiWedge(const Mink a, const Mink b) ;

//////////////////////////////////////////////////////

Mink Regressive(Mink a, Mink b) ;

//////////////////////////////////////////////////////

Mink RegressiveViaFormula(Mink a, Mink b) ;

//////////////////////////////////////////////////////

Mink LowerRightViaFormula(Mink a, Mink b) ;

//////////////////////////////////////////////////////

Mink Expander(const Mink &a, const Mink &b) ;

//////////////////////////////////////////////////////

Mink Conserver(const Mink &a, const Mink &b) ;

//////////////////////////////////////////////////////

Mink Shrinker(const Mink &a, const Mink &b) ;

///////////////////////////////////////////////////////

Mink Symmetric(const Mink &a, const Mink &b) ;

//////////////////////////////////////////////////////

Mink AntiSymmetric(const Mink &a, const Mink &b) ;

//////////////////////////////////////////////////////

Mink Inner(const Mink &a, const Mink &b) ;

//////////////////////////////////////////////////////

Mink LeftContraction (const Mink &a, const Mink &b) ;

//////////////////////////////////////////////////////

Mink RightContraction (const Mink &a, const Mink &b) ;

//////////////////////////////////////////////////////

ex Determinant(Mink A) ;

//////////////////////////////////////////////////////

Mink Adjugate(Mink V) ;

//////////////////////////////////////////////////////

Mink Reciprocal(Mink a) ;



