// Routines for Geometric Algebra in Euclidean spacetime
//
// Author: Kurt Nalty
// Release: 1.0
// Date: 12 March 2018
// License: Freeware
// Alternative License: BSD
//
//////////////////////////////////////////////////////

#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <time.h>
#include <iostream>
#include <fstream>
#include <ginac/ginac.h>
using namespace std;
using namespace GiNaC;

//////////////////////////////////////////////////////

struct GA4E{	// 0 . 1 2 4 8 . 3 5 6 9 10 12 . 7 11 13 14 . 15
	ex q,  x,y,z,t, xy,xz,yz,xt,yt,zt,  xyz,xyt,xzt,yzt,  xyzt;
	GA4E() {q = 0; x = 0; y = 0; z = 0; t = 0; 
		xy = 0; xz = 0; yz = 0;  xt = 0; yt = 0; zt = 0;
		xyz = 0; xyt = 0; xzt = 0; yzt = 0; xyzt=0;}
	GA4E(ex qq, ex xx, ex yy, ex zz, ex tt, 
		ex xxyy, ex xxzz, ex yyzz, ex xxtt, ex yytt, ex zztt,
		ex xxyyzz, ex xxyytt, ex xxzztt, ex yyzztt,   ex xxyyzztt) 

		{q = qq; x = xx; y = yy; z = zz; t = tt;
		 xy = xxyy; xz = xxzz; yz = yyzz; xt = xxtt; yt = yytt; zt = zztt; 
		 xyz = xxyyzz;  xyt = xxyytt; xzt = xxzztt; yzt = yyzztt; xyzt=xxyyzztt;}
};

//////////////////////////////////////////////////////

ostream &operator<<(ostream &ff, GA4E &v) ;

//////////////////////////////////////////////////////

void PrintMV(GA4E &v) ;

//////////////////////////////////////////////////////

GA4E OverBar(GA4E a) ;

//////////////////////////////////////////////////////

GA4E UnderBar(GA4E a) ;

//////////////////////////////////////////////////////

GA4E Reverse(GA4E w) ;

//////////////////////////////////////////////////////

GA4E Involution(GA4E w) ;

//////////////////////////////////////////////////////

GA4E Transpose(GA4E w) ;

//////////////////////////////////////////////////////

GA4E Conjugation(GA4E w) ;

//////////////////////////////////////////////////////

GA4E CliffordConjugation(GA4E w) ;

//////////////////////////////////////////////////////

GA4E Dual(GA4E w) ; 

//////////////////////////////////////////////////////

GA4E DorstDual(GA4E a) ;

//////////////////////////////////////////////////////

GA4E DorstUnDual(GA4E a) ;

//////////////////////////////////////////////////////

GA4E operator+(const GA4E &u, const GA4E &v) ;

//////////////////////////////////////////////////////

GA4E operator-(const GA4E &u, const GA4E &v) ;

//////////////////////////////////////////////////////

int operator==(const GA4E &u, const GA4E &v) ;

//////////////////////////////////////////////////////

int operator!=(const GA4E &u, const GA4E &v) ;

//////////////////////////////////////////////////////

GA4E operator*(const GA4E &u, const GA4E &v) ;

//////////////////////////////////////////////////////

GA4E Product(const GA4E &u, const GA4E &v) ;

//////////////////////////////////////////////////////

GA4E operator/(const GA4E &u, const int i) ;

//////////////////////////////////////////////////////

GA4E operator^(const GA4E &u, const GA4E &v) ;

//////////////////////////////////////////////////////

GA4E Wedge(const GA4E &u, const GA4E &v) ;

//////////////////////////////////////////////////////

GA4E AntiWedge(const GA4E a, const GA4E b) ;

//////////////////////////////////////////////////////

GA4E Regressive(GA4E a, GA4E b) ;

//////////////////////////////////////////////////////

GA4E RegressiveViaFormula(GA4E a, GA4E b) ;

//////////////////////////////////////////////////////

GA4E LowerRightViaFormula(GA4E a, GA4E b) ;

//////////////////////////////////////////////////////

GA4E Expander(const GA4E &a, const GA4E &b) ;

//////////////////////////////////////////////////////

GA4E Conserver(const GA4E &a, const GA4E &b) ;

//////////////////////////////////////////////////////

GA4E Shrinker(const GA4E &a, const GA4E &b) ;

///////////////////////////////////////////////////////

GA4E Symmetric(const GA4E &a, const GA4E &b) ;

//////////////////////////////////////////////////////

GA4E AntiSymmetric(const GA4E &a, const GA4E &b) ;

//////////////////////////////////////////////////////

GA4E Inner(const GA4E &a, const GA4E &b) ;

//////////////////////////////////////////////////////

GA4E LeftContraction (const GA4E &a, const GA4E &b) ;

//////////////////////////////////////////////////////

GA4E RightContraction (const GA4E &a, const GA4E &b) ;

//////////////////////////////////////////////////////

ex Determinant(GA4E A) ;

//////////////////////////////////////////////////////

GA4E Adjugate(GA4E V) ;

//////////////////////////////////////////////////////

GA4E Reciprocal(GA4E a) ;



